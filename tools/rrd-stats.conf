#!/bin/bash
# 
# Parameters expected:
#   $1 = The name of the plugin. 
#        create = setup variables for creating the graphs.
#        none   = Don't create the RRD database.
#        *      = The name of the check, like 'load'
#   $2 = (optional) The extra label for the RRD database. e.g. 'root' for the diskusage plugin.
#
# Environment variables expected:
#   $HOST = hostname or IP address. Used to determine the remote OS and create the RRD database name.
#
# The syntax for the RRD database name is: 
#   host-plugin.rrd or host-plugin-label.rrd
#   examples: 192.168.1.42-load.rrd or 10.1.1.100-diskusage-root.rrd
# Note that the '-' characters in the database name are later used by the scripts that create the graphs to
# determine the 3 items (host, plugin, label). So don't used the '-' character in any of them. Instead use
# the '_' character.

# Define the location of the RRD databases.

STATSDIR=/var/lib/monitoring
PNGDIR=/var/www/monitoring/graphs

PLUGIN=$1
[[ "$PLUGIN" ]] || exit 3
[[ "$HOST" = "" && "$1" != "create" ]] && exit 3
[[ "$2" ]] && LABEL="$PLUGIN-$2" || LABEL=$PLUGIN


#--------------------------------------------------------------------------------------
# If the name of the plugin is given then we want an RRD database to store the results.

if [[ "$PLUGIN" = "create" ]]; then
	GRAPH_HEIGHT=200
	GRAPH_WIDTH=300
	END_TIME=$(date +%s)
	ONE_DAY=$((3600 * 24))
	ONE_WEEK=$((ONE_DAY * 7))
	ONE_MONTH=$((ONE_WEEK * 5))
	START_DAY=$((END_TIME - ONE_DAY))
	START_WEEK=$((END_TIME - ONE_WEEK))
	START_MONTH=$((END_TIME - ONE_MONTH))
	START_TIMES=($START_DAY $START_WEEK $START_MONTH)

	export START_TIMES END_TIME

	DISKUSAGE_TITLE="Usage"
	NETWORKUSAGE_TITLE="network traffic"

elif [[ "$PLUGIN" != "none" ]]; then

	[[ ! -d $STATSDIR ]] && mkdir -p $STATSDIR

	export RRDFILE="$STATSDIR/${HOST}-${LABEL}.rrd"
	
	# Create the RRD database if none existing.
	
	case "$PLUGIN" in
		diskusage)
		        if [[ ! -f $RRDFILE ]]; then
				rrdtool create $RRDFILE "DS:diskspace:GAUGE:600:0:100" \
							"DS:inodes:GAUGE:600:0:100"    \
							"RRA:AVERAGE:0.5:1:288"  \
							"RRA:AVERAGE:0.5:6:336"  \
							"RRA:AVERAGE:0.5:12:1008" \
							"RRA:MAX:0.5:1:288"       \
							"RRA:MAX:0.5:6:336"       \
							"RRA:MAX:0.5:12:1008"   > /dev/null 2>&1
			fi
			;;
		http_response)
			if [[ ! -f $RRDFILE ]]; then
				rrdtool create $RRDFILE "DS:time:GAUGE:600:0:U" \
							"RRA:AVERAGE:0.5:1:288"  \
							"RRA:AVERAGE:0.5:6:336"  \
							"RRA:AVERAGE:0.5:12:1008" \
							"RRA:MAX:0.5:1:288"       \
							"RRA:MAX:0.5:6:336"       \
							"RRA:MAX:0.5:12:1008"   > /dev/null 2>&1
			fi
			;;
		load)
			if [[ ! -f $RRDFILE ]]; then
				rrdtool create $RRDFILE "DS:load1:GAUGE:600:0:20" \
							"DS:load5:GAUGE:600:0:20" \
							"DS:load15:GAUGE:600:0:20" \
							"RRA:AVERAGE:0.5:1:288"  \
							"RRA:AVERAGE:0.5:6:336"  \
							"RRA:AVERAGE:0.5:12:1008" \
							"RRA:MAX:0.5:1:288"       \
							"RRA:MAX:0.5:6:336"       \
							"RRA:MAX:0.5:12:1008"   > /dev/null 2>&1
			fi
			;;
		memory)
		        if [[ ! -f $RRDFILE ]]; then
				rrdtool create $RRDFILE "DS:used:GAUGE:600:0:100" \
							"DS:cached:GAUGE:600:0:100"    \
							"RRA:AVERAGE:0.5:1:288"  \
							"RRA:AVERAGE:0.5:6:336"  \
							"RRA:AVERAGE:0.5:12:1008" \
							"RRA:MAX:0.5:1:288"       \
							"RRA:MAX:0.5:6:336"       \
							"RRA:MAX:0.5:12:1008"   > /dev/null 2>&1
			fi
			;;
		network)
		        if [[ ! -f $RRDFILE ]]; then
				rrdtool create $RRDFILE "DS:rx:DERIVE:600:0:12500000" \
							"DS:tx:DERIVE:600:0:12500000"    \
							"RRA:AVERAGE:0.5:1:288"  \
							"RRA:AVERAGE:0.5:6:336"  \
							"RRA:AVERAGE:0.5:12:1008" \
							"RRA:MAX:0.5:1:288"       \
							"RRA:MAX:0.5:6:336"       \
							"RRA:MAX:0.5:12:1008"   > /dev/null 2>&1
			fi
			;;
		swapspace)
		        if [[ ! -f $RRDFILE ]]; then
				rrdtool create $RRDFILE "DS:swapspace:GAUGE:600:0:100" \
							"RRA:AVERAGE:0.5:1:288"  \
							"RRA:AVERAGE:0.5:6:336"  \
							"RRA:AVERAGE:0.5:12:1008" \
							"RRA:MAX:0.5:1:288"       \
							"RRA:MAX:0.5:6:336"       \
							"RRA:MAX:0.5:12:1008"   > /dev/null 2>&1
			fi
			;;
		varnish_backend)
			if [[ ! -f $RRDFILE ]]; then
				rrdtool create $RRDFILE "DS:backend_conn:GAUGE:600:0:U" \
							"DS:backend_busy:GAUGE:600:0:U"    \
							"DS:backend_retry:GAUGE:600:0:U"    \
							"RRA:AVERAGE:0.5:1:288"  \
							"RRA:AVERAGE:0.5:6:336"  \
							"RRA:AVERAGE:0.5:12:1008" \
							"RRA:MAX:0.5:1:288"       \
							"RRA:MAX:0.5:6:336"       \
							"RRA:MAX:0.5:12:1008"   > /dev/null 2>&1
			fi
			;;
		varnish_cache)
			if [[ ! -f $RRDFILE ]]; then
				rrdtool create $RRDFILE "DS:cache_hit:GAUGE:600:0:U" \
							"DS:cache_hitpass:GAUGE:600:0:U"    \
							"DS:cache_miss:GAUGE:600:0:U"    \
							"RRA:AVERAGE:0.5:1:288"  \
							"RRA:AVERAGE:0.5:6:336"  \
							"RRA:AVERAGE:0.5:12:1008" \
							"RRA:MAX:0.5:1:288"       \
							"RRA:MAX:0.5:6:336"       \
							"RRA:MAX:0.5:12:1008"   > /dev/null 2>&1
			fi
			;;
		varnish_clients)
			if [[ ! -f $RRDFILE ]]; then
				rrdtool create $RRDFILE "DS:client_conn:GAUGE:600:0:U" \
							"DS:client_drop:GAUGE:600:0:U"    \
							"DS:client_req:GAUGE:600:0:U"    \
							"RRA:AVERAGE:0.5:1:288"  \
							"RRA:AVERAGE:0.5:6:336"  \
							"RRA:AVERAGE:0.5:12:1008" \
							"RRA:MAX:0.5:1:288"       \
							"RRA:MAX:0.5:6:336"       \
							"RRA:MAX:0.5:12:1008"   > /dev/null 2>&1
			fi
			;;

	esac
fi	

get_hostname () {
	declare -i element4

	local rrdfile=$(basename $1)
	local hostname=${rrdfile%%-*.rrd}
	[[ "$hostname" = "" ]] &&  hostname="unknown"

	# check if its an IP address
	element4=$(cut -d. -f4 <<< $hostname)
	if [[ $element4 -ge 0 && $element4 -le 255 ]]; then
		if [[ "$hostname" = "127.0.0.1" ]]; then
			hostname=$(hostname -s)
		else
			# Need to separate these to get the exit code of the host command.
			dns=$(host $hostname)
			# If no reverse DNS then use the IP address instead.
			[[ $? -eq 0 ]] && hostname=$(awk '{print $5;}' <<< $dns) 
		fi
	fi

	echo $hostname
}

